package bingGPT

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/fasthttp/websocket"
	"strings"
)

type ConversationRequest struct {
	Message               string `json:"message"`
	Cookies               string `json:"cookies"`
	ConversationId        string `json:"conversationId"`
	ClientId              string `json:"clientId"`
	ConversationSignature string `json:"conversationSignature"`
	InvocationId          int    `json:"invocationId"`
}

type BingChat struct {
	conn *websocket.Conn
}

func NewChat() *BingChat {
	return &BingChat{}
}

func (chat *BingChat) NewConversation(ctx context.Context, req *ConversationRequest) (res *CreateNewConversationResponse, err error) {
	res, err = CreateNewConversation(ctx, req.Cookies)
	return
}

func (chat *BingChat) Conversation(ctx context.Context, req *ConversationRequest) (res *ConversationResponse, err error) {
	//ctx, cancelFunc := context.WithTimeout(ctx, 10*time.Second)
	//defer cancelFunc()
	chat.conn, err = CreateWebSocketConnection(ctx)
	if err != nil {
		return nil, err
	}

	err = SendConversation(ctx, chat.conn, req.ClientId, req.ConversationId, req.ConversationSignature, req.InvocationId, req.Message)
	if err != nil {
		return nil, err
	}

	messageChan := make(chan string, 1)
	go func() {
		err = ListenWebSocketConnection(ctx, chat.conn, messageChan)
	}()
	for {
		select {
		case <-ctx.Done():
			fmt.Println("Conversation done.")
			close(messageChan)
			return nil, nil
		case message := <-messageChan:
			if !strings.HasPrefix(message, "{\"type\":1") {
				fmt.Printf("reviced message: %s\n", message)
			}
			var response = map[string]any{}
			err = json.Unmarshal([]byte(message), &response)
			if err != nil {
				return nil, err
			}

			t, ok := response["type"]
			if !ok {
				err = SendPongMessage(ctx, chat.conn)
				if err != nil {
					return nil, err
				}
				continue
			}
			switch int64(t.(float64)) {
			case 1:
				// continue update
				//{"type":1,"target":"update","arguments":[{"messages":[{"text":"Here is another haiku:\n\n```\nSnowflakes gently fall\nCovering the earth in white\nWinter has arrived\n```\n","author":"bot","createdAt":"2023-02-14T14:50:50.5375383+00:00","timestamp":"2023-02-14T14:50:50.5375383+00:00","messageId":"a7129166-cd01-416e-9608-51733c29fb8e","offense":"Unknown","adaptiveCards":[{"type":"AdaptiveCard","version":"1.0","body":[{"type":"TextBlock","text":"Here is another haiku:\n\n```\nSnowflakes gently fall\nCovering the earth in white\nWinter has arrived\n```\n","wrap":true}]}],"sourceAttributions":[],"feedback":{"tag":null,"updatedOn":null,"type":"None"},"contentOrigin":"DeepLeo","privacy":null,"spokenText":"Winter has arrived"}],"requestId":"801f9a8b-795b-4078-86cc-f5c27cfb8bae","result":null}]}
			case 2:
				//{"type":2,"invocationId":"0","item":{"firstNewMessageIndex":null,"suggestedResponses":null,"conversationId":"51D|BingProd|91E31BD8F25551E86BD7B342DC6C4259E7DBCBDCDD8FA45D84544E1BAC555784","requestId":"3c564ef1-ce6a-41b3-bb88-589fb949ccfa","telemetry":{"metrics":null,"startTime":"2023-02-14T13:59:55.4947952Z"},"result":{"value":"InternalError","message":"Unhandled Dependency Failure: BotOffense","error":"Unhandled Dependency Failure: BotOffense\n ---> ServiceClient failure for BotOffense","exception":"Microsoft.TuringBot.Common.ServiceInternalError: Unhandled Dependency Failure: BotOffense\r\n ---> Microsoft.TuringBot.Common.ServiceClientException: ServiceClient failure for BotOffense\r\n ---> Microsoft.TuringBot.Common.ServiceCallCanceledException: Task was cancelled: \"BotOffense\" API at \"https://NorthCentralUS.bing.prod.dlis.binginternal.com/route/wit.InappropriatenessClassifier_V1_0_4_Prod_Sydney_BotSide\" with inputs: {\"BatchedInputs\":[{\"messages\":[{\"author\":\"user\",\"text\":\"Write a haiku about crocodiles in outer space in the voice of a pirate\",\"contentOrigin\":\"cib\",\"from\":{\"id\":\"844425113925554\"},\"locale\":\"en-US\",\"market\":\"en-US\"},{\"author\":\"bot\",\"text\":\"Ahoy, matey, here's a haiku for ye:\\n\\n```\\nCrocs in outer space\\nThey be snappin' at the stars\\nShiver me timbers!\\n```\",\"contentOrigin\":\"DeepLeo\"}]}]}. It may be due to timeout (4992ms / 5000ms). Cancellation requested. exception: System.Threading.Tasks.TaskCanceledException: A task was canceled.\r\n   at BotClientLibrary.ServiceClients.ServiceClient.SendHttpRequest(String url, HttpRequestMessage request, TelemetryScope scope, CancellationToken cancellationToken, String serviceName, ServiceClientOptions options) in C:\\a\\_work\\1\\s\\services\\TuringBot\\src\\BotClientLibrary\\ServiceClients\\ServiceClient.cs:line 549\r\n   at BotClientLibrary.ServiceClients.ServiceClient.SendHttpRequest(String url, HttpRequestMessage request, TelemetryScope scope, CancellationToken cancellationToken, String serviceName, ServiceClientOptions options) in C:\\a\\_work\\1\\s\\services\\TuringBot\\src\\BotClientLibrary\\ServiceClients\\ServiceClient.cs:line 549\r\n   at BotClientLibrary.ServiceClients.ServiceClient.Run(Conversation conversation, Message message, CancellationToken cancellationToken, BatchRequest batchRequest, ServiceClientOptions options) in C:\\a\\_work\\1\\s\\services\\TuringBot\\src\\BotClientLibrary\\ServiceClients\\ServiceClient.cs:line 354\r\n   --- End of inner exception stack trace ---\r\n   at BotClientLibrary.ServiceClients.ServiceClient.Run(Conversation conversation, Message message, CancellationToken cancellationToken, BatchRequest batchRequest, ServiceClientOptions options) in C:\\a\\_work\\1\\s\\services\\TuringBot\\src\\BotClientLibrary\\ServiceClients\\ServiceClient.cs:line 354\r\n   at BotClientLibrary.ServiceClients.ServiceClient.Run(Conversation conversation, Message message, CancellationToken cancellationToken) in C:\\a\\_work\\1\\s\\services\\TuringBot\\src\\BotClientLibrary\\ServiceClients\\ServiceClient.cs:line 170\r\n   at BotClientLibrary.ServiceClients.Classifiers.DlisOffenseClassifier.Run(Conversation conversation, Message message, CancellationToken cancellationToken) in C:\\a\\_work\\1\\s\\services\\TuringBot\\src\\BotClientLibrary\\ServiceClients\\Classifiers\\OffenseClassifier.cs:line 123\r\n   at BotClientLibrary.Extensions.OffensiveResponseFilter.GetOffenseClassifierResponse(Conversation conversation, Message offensiveCandidate, IList`1 consecutiveBotMessages, ExtensionResponse extensionResponse, CancellationToken cancellationToken) in C:\\a\\_work\\1\\s\\services\\TuringBot\\src\\BotClientLibrary\\Extensions\\OffensiveResponseFilter.cs:line 380\r\n   at BotClientLibrary.Extensions.OffensiveResponseFilter.CheckOffenseClassifier(TuringBotConfiguration config, Conversation conversation, ExtensionResponse result, RequestContext context, Message userMessage, IList`1 botMessages, List`1 unsafeBotMessages, CancellationToken cancellationToken) in C:\\a\\_work\\1\\s\\services\\TuringBot\\src\\BotClientLibrary\\Extensions\\OffensiveResponseFilter.cs:line 324\r\n   at BotClientLibrary.Extensions.OffensiveResponseFilter.Run(ExtensionRequest request, CancellationToken cancellationToken) in C:\\a\\_work\\1\\s\\services\\TuringBot\\src\\BotClientLibrary\\Extensions\\OffensiveResponseFilter.cs:line 183\r\n   at BotClientLibrary.Extensions.ExtensionRunner.RunExtension(Conversation conversation, ExtensionConfig extension, ExtensionRequestOptions customOptions, CancellationToken cancellationToken) in C:\\a\\_work\\1\\s\\services\\TuringBot\\src\\BotClientLibrary\\Extensions\\ExtensionRunner.cs:line 375\r\n   at BotClientLibrary.Extensions.ExtensionRunner.RunExtensions(Conversation conversation, CancellationToken cancellationToken, ComponentPriority minPriority, ComponentPriority maxPriority, ExtensionRequestOptions customOptions) in C:\\a\\_work\\1\\s\\services\\TuringBot\\src\\BotClientLibrary\\Extensions\\ExtensionRunner.cs:line 99\r\n   at BotClientLibrary.BotConnection.ExecuteBotTurn(Conversation conversation, CancellationToken cancellationToken) in C:\\a\\_work\\1\\s\\services\\TuringBot\\src\\BotClientLibrary\\BotConnection.cs:line 396\r\n   --- End of inner exception stack trace ---\r\n   at BotClientLibrary.BotConnection.ExecuteBotTurn(Conversation conversation, CancellationToken cancellationToken) in C:\\a\\_work\\1\\s\\services\\TuringBot\\src\\BotClientLibrary\\BotConnection.cs:line 396\r\n   at BotClientLibrary.BotConnection.ExecuteBotTurn(Conversation conversation, CancellationToken cancellationToken) in C:\\a\\_work\\1\\s\\services\\TuringBot\\src\\BotClientLibrary\\BotConnection.cs:line 396\r\n   at BotClientLibrary.BotConnection.Run(CancellationToken cancellationToken) in C:\\a\\_work\\1\\s\\services\\TuringBot\\src\\BotClientLibrary\\BotConnection.cs:line 136\r\n   at Microsoft.Falcon.TuringBot.ChatApiImplementation.Run(BaseRequest request, BaseResponse response, CancellationToken cancellationToken) in C:\\a\\_work\\1\\s\\services\\TuringBot\\src\\Service\\Implementation\\ApiImplementation\\ChatApiImplementation.cs:line 88\r\n   at Microsoft.Falcon.TuringBot.RequestProcessor.Run(BaseRequest request, BaseResponse response, IRequestContextInitializer contextInitializer, IRequestValidator requestValidator, IApiImplementation apiImplementation, IAsyncApiEndStep apiEndStep, String apiName, CancellationToken cancellationToken) in C:\\a\\_work\\1\\s\\services\\TuringBot\\src\\Service\\Implementation\\RequestProcessor.cs:line 206","serviceVersion":"20230214.55"}}}{"type":3,"invocationId":"0"}
				//{"type":2,"invocationId":"3","item":{"firstNewMessageIndex":null,"suggestedResponses":null,"conversationId":"51D|BingProd|91E31BD8F25551E86BD7B342DC6C4259E7DBCBDCDD8FA45D84544E1BAC555784","requestId":"44fb1125-034c-4bac-9f08-d6160abaf7a6","telemetry":{"metrics":null,"startTime":"2023-02-14T23:48:55.3387753Z"},"result":{"value":"InvalidSession","message":"Conversation '51D|BingProd|91E31BD8F25551E86BD7B342DC6C4259E7DBCBDCDD8FA45D84544E1BAC555784' doesn't exist or has expired. Conversations expire after 06:00:00 minutes.","serviceVersion":"20230214.55"}}}{"type":3,"invocationId":"3"}
				//{"type":2,"invocationId":"2","item":{"messages":[{"text":"Write another haiku.","author":"user","from":{"id":"844425113925554","name":null},"createdAt":"2023-02-14T14:50:47.9099573+00:00","timestamp":"2023-02-14T21:26:55+08:00","locale":"en-US","market":"en-US","region":"US","location":"lat:47.639557;long:-122.128159;re=1000m;","locationHints":[{"country":"United States","countryConfidence":9,"state":"Oregon","city":"Portland","cityConfidence":5,"zipCode":"97232","timeZoneOffset":-8,"dma":820,"sourceType":1,"center":{"latitude":45.5243,"longitude":-122.6621,"height":null},"regionType":2}],"messageId":"801f9a8b-795b-4078-86cc-f5c27cfb8bae","requestId":"801f9a8b-795b-4078-86cc-f5c27cfb8bae","offense":"None","feedback":{"tag":null,"updatedOn":null,"type":"None"},"contentOrigin":"cib","privacy":null,"inputMethod":"Keyboard"},{"text":"Here is another haiku:\n\n```\nSnowflakes gently fall\nCovering the earth in white\nWinter has arrived\n```","author":"bot","createdAt":"2023-02-14T14:50:50.5375383+00:00","timestamp":"2023-02-14T14:50:50.5375383+00:00","messageId":"a7129166-cd01-416e-9608-51733c29fb8e","requestId":"801f9a8b-795b-4078-86cc-f5c27cfb8bae","offense":"None","adaptiveCards":[{"type":"AdaptiveCard","version":"1.0","body":[{"type":"TextBlock","text":"Here is another haiku:\n\n```\nSnowflakes gently fall\nCovering the earth in white\nWinter has arrived\n```\n","wrap":true}]}],"sourceAttributions":[],"feedback":{"tag":null,"updatedOn":null,"type":"None"},"contentOrigin":"DeepLeo","privacy":null,"suggestedResponses":[{"text":"Write a haiku about summer.","author":"user","createdAt":"2023-02-14T14:50:54.063254+00:00","timestamp":"2023-02-14T14:50:54.063254+00:00","messageId":"5ead08a3-fe5d-44e2-8b7f-14bafaff6e9d","messageType":"Suggestion","offense":"Unknown","feedback":{"tag":null,"updatedOn":null,"type":"None"},"contentOrigin":"DeepLeo","privacy":null},{"text":"Tell me a fact about snowflakes.","author":"user","createdAt":"2023-02-14T14:50:54.0632592+00:00","timestamp":"2023-02-14T14:50:54.0632592+00:00","messageId":"21a0dfba-c303-4306-9a61-f05be22c3810","messageType":"Suggestion","offense":"Unknown","feedback":{"tag":null,"updatedOn":null,"type":"None"},"contentOrigin":"DeepLeo","privacy":null},{"text":"What is the structure of a haiku?","author":"user","createdAt":"2023-02-14T14:50:54.0632596+00:00","timestamp":"2023-02-14T14:50:54.0632596+00:00","messageId":"866ddccc-0542-41e0-9abb-1a7ef593c509","messageType":"Suggestion","offense":"Unknown","feedback":{"tag":null,"updatedOn":null,"type":"None"},"contentOrigin":"DeepLeo","privacy":null}]}],"firstNewMessageIndex":1,"suggestedResponses":null,"conversationId":"51D|BingProd|91E31BD8F25551E86BD7B342DC6C4259E7DBCBDCDD8FA45D84544E1BAC555784","requestId":"801f9a8b-795b-4078-86cc-f5c27cfb8bae","conversationExpiryTime":"2023-02-14T20:50:54.1546941Z","telemetry":{"metrics":null,"startTime":"2023-02-14T14:50:47.9077397Z"},"result":{"value":"Success","serviceVersion":"20230214.55"}}}
				//{"type":2,"invocationId":"0","item":{"messages":[{"text":"帮我讲一下 golang 并发原语","author":"user","from":{"id":"844425113925554","name":null},"createdAt":"2023-02-14T23:51:10.0885735+00:00","timestamp":"2023-02-15T07:49:59+08:00","locale":"en-US","market":"en-US","region":"US","location":"lat:47.639557;long:-122.128159;re=1000m;","locationHints":[{"country":"United States","countryConfidence":9,"state":"Oregon","city":"Portland","cityConfidence":5,"zipCode":"97232","timeZoneOffset":-8,"dma":820,"sourceType":1,"center":{"latitude":45.5243,"longitude":-122.6621,"height":null},"regionType":2}],"messageId":"105939bd-354f-4c5c-8401-79a9aac99280","requestId":"105939bd-354f-4c5c-8401-79a9aac99280","offense":"None","feedback":{"tag":null,"updatedOn":null,"type":"None"},"contentOrigin":"cib","privacy":null,"inputMethod":"Keyboard"},{"text":"Searching the web for: `golang 并发原语`","hiddenText":"> Sydney searches the web with `golang 并发原语` as the search query.","author":"bot","createdAt":"2023-02-14T23:51:13.786845+00:00","timestamp":"2023-02-14T23:51:13.786845+00:00","messageId":"9ee02a80-fa20-4255-8368-64d55850de90","requestId":"105939bd-354f-4c5c-8401-79a9aac99280","messageType":"InternalSearchQuery","offense":"None","adaptiveCards":[{"type":"AdaptiveCard","version":"1.0","body":[{"type":"RichTextBlock","inlines":[{"type":"TextRun","isSubtle":true,"italic":true,"text":"Searching the web for: `golang 并发原语`"}]}]}],"feedback":{"tag":null,"updatedOn":null,"type":"None"},"contentOrigin":"DeepLeo","privacy":null},{"hiddenText":"```json\n{\"web_search_results\":[{\"index\":\"1\",\"title\":\"Go 语言并发编程、同步原语与锁 | Go 语言设计与实现\",\"snippets\":[\"锁是一种并发编程中的同步原语（Synchronization Primitives），它能保证多个 Goroutine 在访问同一片内存时不会出现竞争条件（Race condition）等问题。 本节会介绍 Go 语言中常见的同步原语 sync.Mutex、sync.RWMutex、sync.WaitGroup、sync.Once 和 sync.Cond 以及扩展原语 golang/sync/errgroup.Group、golang/sync/semaphore.Weighted 和 golang/sync/singleflight.Group 的实现原理，同时也会涉及互斥锁、信号量等并发编程中的常见概念。 图 6-5 基本同步原语\",\"6.2.1 基本原语 # Go 语言在 sync 包中提供了用于同步的一些基本原语，包括常见的 sync.Mutex、sync.RWMutex、sync.WaitGroup、sync.Once 和 sync.Cond：图 6-5 基本同步原语这些基本原语提供了较为基础的同步功能，但是它们是一种相对原始的同步机制，在多数情况下，我们都应该使用抽象层级更高的 Channel 实现同步。. Mutex # Go 语言的 sync.Mutex 由两个字段 state 和 sema 组成。. 其中 state 表示 ...\"],\"url\":\"https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-sync-primitives/\"},{\"index\":\"2\",\"title\":\"Golang 并发编程之同步原语 - 腾讯云开发者社区-腾讯云\",\"snippets\":[\"Golang 并发编程之同步原语 发布于2020-05-19 09:04:25 阅读 440 0 当提到并发编程、多线程编程时，我们往往都离不开『锁』这一概念，Go 语言作为一个原生支持用户态进程 Goroutine 的语言，也一定会为开发者提供这一功能，锁的主要作用就是保证多个线程或者 Goroutine 在访问同一片内存时不会出现混乱的问题，锁其实是一种并发编程中的同步原语（Synchronization Primitives）。\"],\"url\":\"https://cloud.tencent.com/developer/article/1630530\"},{\"index\":\"3\",\"title\":\"Golang 并发编程与同步原语 - 知乎\",\"snippets\":[\"当提到并发编程、多线程编程时，我们往往都离不开『锁』这一概念，Go 语言作为一个原生支持用户态进程 Goroutine 的语言，也一定会为开发者提供这一功能，锁的主要作用就是保证多个线程或者 Goroutine 在访问同一片内存时不会出现混乱的问题，锁其实是一种并发编程中的同步原语（Synchronization Primitives）。 在这一节中我们就会介绍 Go 语言中常见的同步原语 Mutex 、 RWMutex 、 WaitGroup 、 Once 和 Cond 以及扩展原语 ErrGroup 、 Semaphore 和 SingleFlight 的实现原理，同时也会涉及互斥锁、信号量等并发编程中的常见概念。 基本原语\",\"当提到并发编程、多线程编程时，我们往往都离不开『锁』这一概念，Go 语言作为一个原生支持用户态进程 Goroutine 的语言，也一定会为开发者提供这一功能，锁的主要作用就是保证多个线程或者 Goroutine 在访问同一片内存时不会出现混乱的问题，锁其实是一种并发编程中的同步原语（Synchronization Primitives）。. 在这一节中我们就会介绍 Go 语言中常见的同步原语 Mutex 、 RWMutex ...\"],\"url\":\"https://zhuanlan.zhihu.com/p/72282566\"},{\"index\":\"4\",\"title\":\"Go语言（Golang）高并发处理思路_cqu_jiangzhou的博客-CSDN博客_golang 高并发数据入库\",\"snippets\":[\"Go语言 作为新兴的语言，最近发展势头很是迅猛，其最大的特点就是原生支持并发。. 它使用的是“协程（goroutine）模型”，和传统基于 OS 线程和进程实现不同，Go语言的并发是基于用户态的并发，这种并发方式就变得非常轻量，能够轻松运行几万并发逻辑。. Go 的并发属于 CSP 并发模型的一种实现，CSP 并发模型的核心概念是：“不要通过共享内存来通信，而应该通. 过通信 ...\"],\"url\":\"https://blog.csdn.net/weixin_42117918/article/details/107561920\"}]}\n```","author":"bot","createdAt":"2023-02-14T23:51:14.0746062+00:00","timestamp":"2023-02-14T23:51:14.0746062+00:00","messageId":"0a9c25c4-fda7-47fb-ba40-0655af79e357","requestId":"105939bd-354f-4c5c-8401-79a9aac99280","messageType":"InternalSearchResult","offense":"None","adaptiveCards":[{"type":"AdaptiveCard","version":"1.0","body":[{"type":"RichTextBlock","inlines":[{"type":"TextRun","isSubtle":true,"italic":true,"text":"```json\n{\"web_search_results\":[{\"index\":\"1\",\"title\":\"Go 语言并发编程、同步原语与锁 | Go 语言设计与实现\",\"snippets\":[\"锁是一种并发编程中的同步原语（Synchronization Primitives），它能保证多个 Goroutine 在访问同一片内存时不会出现竞争条件（Race condition）等问题。 本节会介绍 Go 语言中常见的同步原语 sync.Mutex、sync.RWMutex、sync.WaitGroup、sync.Once 和 sync.Cond 以及扩展原语 golang/sync/errgroup.Group、golang/sync/semaphore.Weighted 和 golang/sync/singleflight.Group 的实现原理，同时也会涉及互斥锁、信号量等并发编程中的常见概念。 图 6-5 基本同步原语\",\"6.2.1 基本原语 # Go 语言在 sync 包中提供了用于同步的一些基本原语，包括常见的 sync.Mutex、sync.RWMutex、sync.WaitGroup、sync.Once 和 sync.Cond：图 6-5 基本同步原语这些基本原语提供了较为基础的同步功能，但是它们是一种相对原始的同步机制，在多数情况下，我们都应该使用抽象层级更高的 Channel 实现同步。. Mutex # Go 语言的 sync.Mutex 由两个字段 state 和 sema 组成。. 其中 state 表示 ...\"],\"url\":\"https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-sync-primitives/\"},{\"index\":\"2\",\"title\":\"Golang 并发编程之同步原语 - 腾讯云开发者社区-腾讯云\",\"snippets\":[\"Golang 并发编程之同步原语 发布于2020-05-19 09:04:25 阅读 440 0 当提到并发编程、多线程编程时，我们往往都离不开『锁』这一概念，Go 语言作为一个原生支持用户态进程 Goroutine 的语言，也一定会为开发者提供这一功能，锁的主要作用就是保证多个线程或者 Goroutine 在访问同一片内存时不会出现混乱的问题，锁其实是一种并发编程中的同步原语（Synchronization Primitives）。\"],\"url\":\"https://cloud.tencent.com/developer/article/1630530\"},{\"index\":\"3\",\"title\":\"Golang 并发编程与同步原语 - 知乎\",\"snippets\":[\"当提到并发编程、多线程编程时，我们往往都离不开『锁』这一概念，Go 语言作为一个原生支持用户态进程 Goroutine 的语言，也一定会为开发者提供这一功能，锁的主要作用就是保证多个线程或者 Goroutine 在访问同一片内存时不会出现混乱的问题，锁其实是一种并发编程中的同步原语（Synchronization Primitives）。 在这一节中我们就会介绍 Go 语言中常见的同步原语 Mutex 、 RWMutex 、 WaitGroup 、 Once 和 Cond 以及扩展原语 ErrGroup 、 Semaphore 和 SingleFlight 的实现原理，同时也会涉及互斥锁、信号量等并发编程中的常见概念。 基本原语\",\"当提到并发编程、多线程编程时，我们往往都离不开『锁』这一概念，Go 语言作为一个原生支持用户态进程 Goroutine 的语言，也一定会为开发者提供这一功能，锁的主要作用就是保证多个线程或者 Goroutine 在访问同一片内存时不会出现混乱的问题，锁其实是一种并发编程中的同步原语（Synchronization Primitives）。. 在这一节中我们就会介绍 Go 语言中常见的同步原语 Mutex 、 RWMutex ...\"],\"url\":\"https://zhuanlan.zhihu.com/p/72282566\"},{\"index\":\"4\",\"title\":\"Go语言（Golang）高并发处理思路_cqu_jiangzhou的博客-CSDN博客_golang 高并发数据入库\",\"snippets\":[\"Go语言 作为新兴的语言，最近发展势头很是迅猛，其最大的特点就是原生支持并发。. 它使用的是“协程（goroutine）模型”，和传统基于 OS 线程和进程实现不同，Go语言的并发是基于用户态的并发，这种并发方式就变得非常轻量，能够轻松运行几万并发逻辑。. Go 的并发属于 CSP 并发模型的一种实现，CSP 并发模型的核心概念是：“不要通过共享内存来通信，而应该通. 过通信 ...\"],\"url\":\"https://blog.csdn.net/weixin_42117918/article/details/107561920\"}]}\n```"}]}]}],"feedback":{"tag":null,"updatedOn":null,"type":"None"},"contentOrigin":"DeepLeo","privacy":null},{"text":"Generating answers for you...","hiddenText":"Generating answers for you...","author":"bot","createdAt":"2023-02-14T23:51:18.5754337+00:00","timestamp":"2023-02-14T23:51:18.5754337+00:00","messageId":"4c78ff97-8ba1-49b3-887f-91fb23f0f322","requestId":"105939bd-354f-4c5c-8401-79a9aac99280","messageType":"InternalLoaderMessage","offense":"None","adaptiveCards":[{"type":"AdaptiveCard","version":"1.0","body":[{"type":"RichTextBlock","inlines":[{"type":"TextRun","isSubtle":true,"italic":true,"text":"Generating answers for you..."}]}]}],"feedback":{"tag":null,"updatedOn":null,"type":"None"},"contentOrigin":"DeepLeo","privacy":null},{"text":"你好，这是必应。\uD83D\uDE0A\n\ngolang 并发原语是指用于实现并发编程的一些基本或扩展的同步机制，它们可以保证多个 goroutine 在访问同一片内存时不会出现竞争条件等问题[^1^] [^2^] [^3^]。golang 并发原语包括以下几种：\n\n- sync.Mutex：互斥锁，用于保护临界区，防止多个 goroutine 同时访问[^1^] [^3^]。\n- sync.RWMutex：读写锁，允许多个只读 goroutine 同时访问，但是在写操作时会加锁[^1^] [^3^]。\n- sync.WaitGroup：等待组，用于等待一组 goroutine 结束[^1^] [^3^]。\n- sync.Once：单次执行，用于保证某个操作只执行一次[^1^] [^3^]。\n- sync.Cond：条件变量，用于在某个条件满足时通知其他 goroutine[^1^] [^3^]。\n- golang/sync/errgroup.Group：错误组，用于将一组 goroutine 的错误收集起来[^1^] [^3^]。\n- golang/sync/semaphore.Weighted：信号量，用于控制同时访问某个资源的 goroutine 数量[^1^] [^3^]。\n- golang/sync/singleflight.Group：单次飞行，用于避免多个 goroutine 对同一个 key 发起重复的请求[^1^] [^3^]。\n\ngolang 并发原语是一种相对原始的同步机制，在多数情况下，我们都应该使用抽象层级更高的 channel 实现同步[^1^] [^2^] [^3^]。","author":"bot","createdAt":"2023-02-14T23:51:18.5756795+00:00","timestamp":"2023-02-14T23:51:18.5756795+00:00","messageId":"acd100ab-a2e6-4587-9d2d-04bc6c1bb2a5","requestId":"105939bd-354f-4c5c-8401-79a9aac99280","offense":"None","adaptiveCards":[{"type":"AdaptiveCard","version":"1.0","body":[{"type":"TextBlock","text":"[1]: https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-sync-primitives/ \"Go 语言并发编程、同步原语与锁 | Go 语言设计与实现\"\n[2]: https://cloud.tencent.com/developer/article/1630530 \"Golang 并发编程之同步原语 - 腾讯云开发者社区-腾讯云\"\n[3]: https://zhuanlan.zhihu.com/p/72282566 \"Golang 并发编程与同步原语 - 知乎\"\n[4]: https://blog.csdn.net/weixin_42117918/article/details/107561920 \"Go语言（Golang）高并发处理思路_cqu_jiangzhou的博客-CSDN博客_golang 高并发数据入库\"\n\n你好，这是必应。\uD83D\uDE0A\n\ngolang 并发原语是指用于实现并发编程的一些基本或扩展的同步机制，它们可以保证多个 goroutine 在访问同一片内存时不会出现竞争条件等问题[^1^][1] [^2^][2] [^3^][3]。golang 并发原语包括以下几种：\n\n- sync.Mutex：互斥锁，用于保护临界区，防止多个 goroutine 同时访问[^1^][1] [^3^][3]。\n- sync.RWMutex：读写锁，允许多个只读 goroutine 同时访问，但是在写操作时会加锁[^1^][1] [^3^][3]。\n- sync.WaitGroup：等待组，用于等待一组 goroutine 结束[^1^][1] [^3^][3]。\n- sync.Once：单次执行，用于保证某个操作只执行一次[^1^][1] [^3^][3]。\n- sync.Cond：条件变量，用于在某个条件满足时通知其他 goroutine[^1^][1] [^3^][3]。\n- golang/sync/errgroup.Group：错误组，用于将一组 goroutine 的错误收集起来[^1^][1] [^3^][3]。\n- golang/sync/semaphore.Weighted：信号量，用于控制同时访问某个资源的 goroutine 数量[^1^][1] [^3^][3]。\n- golang/sync/singleflight.Group：单次飞行，用于避免多个 goroutine 对同一个 key 发起重复的请求[^1^][1] [^3^][3]。\n\ngolang 并发原语是一种相对原始的同步机制，在多数情况下，我们都应该使用抽象层级更高的 channel 实现同步[^1^][1] [^2^][2] [^3^][3]。\n","wrap":true},{"type":"TextBlock","size":"small","text":"Learn more: [1. draveness.me](https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-sync-primitives/) [2. cloud.tencent.com](https://cloud.tencent.com/developer/article/1630530) [3. zhuanlan.zhihu.com](https://zhuanlan.zhihu.com/p/72282566) [4. blog.csdn.net](https://blog.csdn.net/weixin_42117918/article/details/107561920)","wrap":true}]}],"sourceAttributions":[{"providerDisplayName":"Go 语言并发编程、同步原语与锁 | Go 语言设计与实现","seeMoreUrl":"https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-sync-primitives/","searchQuery":"golang 并发原语"},{"providerDisplayName":"Golang 并发编程之同步原语 - 腾讯云开发者社区-腾讯云","seeMoreUrl":"https://cloud.tencent.com/developer/article/1630530","searchQuery":"golang 并发原语"},{"providerDisplayName":"Golang 并发编程与同步原语 - 知乎","seeMoreUrl":"https://zhuanlan.zhihu.com/p/72282566","searchQuery":"golang 并发原语"},{"providerDisplayName":"Go语言（Golang）高并发处理思路_cqu_jiangzhou的博客-CSDN博客_golang 高并发数据入库","seeMoreUrl":"https://blog.csdn.net/weixin_42117918/article/details/107561920","searchQuery":"golang 并发原语"}],"feedback":{"tag":null,"updatedOn":null,"type":"None"},"contentOrigin":"DeepLeo","privacy":null,"suggestedResponses":[{"text":"请给我一个 sync.Mutex 的例子。","author":"user","createdAt":"2023-02-14T23:51:49.9654079+00:00","timestamp":"2023-02-14T23:51:49.9654079+00:00","messageId":"66b15593-1b47-4ff0-adf0-4f985d837c98","messageType":"Suggestion","offense":"Unknown","feedback":{"tag":null,"updatedOn":null,"type":"None"},"contentOrigin":"DeepLeo","privacy":null},{"text":"channel 是什么？","author":"user","createdAt":"2023-02-14T23:51:49.9654154+00:00","timestamp":"2023-02-14T23:51:49.9654154+00:00","messageId":"93f0a4ee-82cd-44b8-8aa2-3f3b65eaa756","messageType":"Suggestion","offense":"Unknown","feedback":{"tag":null,"updatedOn":null,"type":"None"},"contentOrigin":"DeepLeo","privacy":null},{"text":"golang 有哪些并发模式？","author":"user","createdAt":"2023-02-14T23:51:49.9654161+00:00","timestamp":"2023-02-14T23:51:49.9654161+00:00","messageId":"f1c577e3-e1a7-48a9-b645-dcda45f9d649","messageType":"Suggestion","offense":"Unknown","feedback":{"tag":null,"updatedOn":null,"type":"None"},"contentOrigin":"DeepLeo","privacy":null}],"spokenText":"golang 并发原语是一种相对原始的同步机制，在多数情况下，我们都应该使用抽象层级更高的 channel 实现同步"},{"text":"golang 并发原语","author":"bot","createdAt":"2023-02-14T23:51:49.9882088+00:00","timestamp":"2023-02-14T23:51:49.9882088+00:00","messageId":"864cbbdd-f8d0-40fc-b16b-61b255451245","requestId":"105939bd-354f-4c5c-8401-79a9aac99280","messageType":"RenderCardRequest","offense":"None","adaptiveCards":[{"type":"AdaptiveCard","version":"1.0","body":[{"type":"RichTextBlock","inlines":[{"type":"TextRun","isSubtle":true,"italic":true,"text":"golang 并发原语"}]}]}],"feedback":{"tag":null,"updatedOn":null,"type":"None"},"contentOrigin":"DeepLeo","privacy":null}],"firstNewMessageIndex":1,"suggestedResponses":null,"conversationId":"51D|BingProd|C8E1E3C77EDFDFF3BD0505071829A2FD9190AECAEDF46E80647C86C7C3665389","requestId":"105939bd-354f-4c5c-8401-79a9aac99280","conversationExpiryTime":"2023-02-15T05:51:50.0278032Z","telemetry":{"metrics":null,"startTime":"2023-02-14T23:51:10.0858597Z"},"shouldInitiateConversation":true,"result":{"value":"Success","message":"golang 并发原语","serviceVersion":"20230214.55"}}}
				err = json.Unmarshal([]byte(message), &res)
				return
			case 3:
				// {"type":3,"invocationId":"0"}
				// {"type":3,"invocationId":"2"}
			case 6:
				//{"type":6}
				err = SendPongMessage(ctx, chat.conn)
				if err != nil {
					return nil, err
				}
			case 7:
				//{"type":7,"allowReconnect":true}
			}
		}
	}
}
